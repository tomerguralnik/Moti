import pika
import json
from pathlib import Path 
from datetime import datetime

class RabbitmqServerPublisher:
	protocol = 'rabbitmq_server'
	def __init__(self, queues, host, port, path, name):
		"""
		Initiate a pika connection, declare all queues and add them to
		the exchange
		all queue's names are change to {name}/{queue}
		:param queues: list of queues to declare
		:type queues: list
		:param host: ip of the message queue
		:type host: str
		:param port: port of the message queue
		:type port: int
		:param path: path to directory where parsers should save their data
		:type path: str
		:param name: name of the desired exchange
		:type name: str
		"""
		self.name = name
		self.path = path / 'publish_records'
		self.path.mkdir(exist_ok = True)
		self.queues = queues
		connection = pika.BlockingConnection(
			 		 pika.ConnectionParameters(host = host,
			 						           port = port))
		channel = connection.channel()
		channel.exchange_declare(exchange = name,
								 exchange_type = 'fanout')
		self.channel = channel
		for queue in queues:
			self.channel.queue_declare(queue = f"{self.name}/{queue}")
			self.channel.queue_bind(exchange = self.name,
							   		queue = f"{self.name}/{queue}")

	def publish(self, snapshot):
		"""
		Turns the snapshot into a json
		:param snapshot: a Snapshot generated by the server for the protocol file
			this snapshot contains an additional variable user that contains the user
			information from the hello message
		:type snapshot: protocol.Snapshot
		"""
		msg = str(self._to_json(snapshot))
		self.channel.basic_publish(exchange = self.name, 
								   body = msg,
								   routing_key = '')

	def _to_json(self, snapshot):
		"""
		Create a json file out of snapshot and return it's path
		:param snapshot: a Snapshot generated by the server for the protocol file
			this snapshot contains an additional variable user that contains the user
			information from the hello message
		:type snapshot: protocol.Snapshot
		:return: path to a json file containing snapshot info
		:rtype: str
		"""
		path = self.path / str(snapshot.user['user_id'])
		path.mkdir(exist_ok = True)
		path = path / (datetime.fromtimestamp(snapshot.timestamp/1000).strftime('%Y-%m-%d_%H-%M-%S.%f') + '.json')
		path.touch()
		fp = path.open('w')
		to_dump = snapshot.compactify(path.parent)
		to_dump['user'] = snapshot.user
		json.dump(to_dump, fp)
		return path.absolute()
